#include <iostream>
#include <vector>
#include <string>

using namespace std;

/**
*    Name: printArray
*    Print each element of the generic vector on a new line. Do not return anything.
*    @param A generic vector
**/

/*
Generics is the idea to allow type (Integer, String, â€¦ etc and user-defined types) to be a parameter to methods, classes and interfaces. For example, classes like an array, map, etc, which can be used using generics very efficiently. We can use them for any type.

Generic Programming enables the programmer to write a general algorithm which will work with all data types.
*/

template <class T> 
    void printArray(vector<T> i) 
    { 
        for(int j=0;j<i.size();j++) 
            cout<<i[j]<<endl;
    } 

    void printArray(vector<string> a)
    {
        for(auto i:a)
            cout<<i<<endl;
    }
    
int main() {
	int n;
	
	cin >> n;
	vector<int> int_vector(n);
	for (int i = 0; i < n; i++) {
		int value;
		cin >> value;
		int_vector[i] = value;
	}
	
	cin >> n;
	vector<string> string_vector(n);
	for (int i = 0; i < n; i++) {
		string value;
		cin >> value;
		string_vector[i] = value;
	}

	printArray<int>(int_vector);
	printArray<string>(string_vector);

	return 0;
}
